{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filteredrobots","filter","robot","toLowerCase","includes","length","Boolean","window","location","hostname","match","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAiBeA,EAfF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAKC,EAAc,EAAdA,MAAMC,EAAQ,EAARA,GAE1B,OAEI,sBAAKC,UAAY,kDAAjB,UACI,qBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,gCACI,mCAAMF,KACN,kCAAKC,YCmBFK,EA1BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAETC,EAAeD,EAAOE,KAAI,SAACC,EAAKC,GAClC,OACA,cAAC,EAAD,CAEIT,GAAIK,EAAOI,GAAGT,GACdF,KAAOO,EAAOI,GAAGX,KACjBC,MAAOM,EAAOI,GAAGV,OAHZM,EAAOI,GAAGT,OAOvB,OACQ,8BACKM,KCDFI,EAbG,SAAC,GAAmB,IAAlBC,EAAiB,EAAjBA,aAChB,OACI,qBAAKV,UAAW,MAAhB,SACA,uBACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCIHI,G,MAVA,SAACC,GACZ,OACQ,qBAAKC,MAAO,CAACC,UAAW,SAAWC,OAAQ,kBAAoBC,OAAO,SAAtE,SACKJ,EAAMK,aCiBRC,E,kDApBX,WAAYN,GAAQ,IAAD,8BACX,cAAMA,IACDO,MAAM,CACPC,UAAS,GAHF,E,8DAODC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SAEH,4DAEJG,KAAKX,MAAMK,a,GAlBCQ,aCsFZC,E,kDApEX,aAAc,IAAD,8BACT,gBAoBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAACK,YAAaD,EAAME,OAAOC,SApBzC,EAAKZ,MAAQ,CACLlB,OAAQ,GACR4B,YAAY,IAJX,E,gEAQG,IAAD,OAEhBG,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAAQA,EAASC,UAElBF,MAAK,SAAAG,GAEL,EAAKZ,SAAS,CAACvB,OAAQmC,S,+BActB,IAAD,OAEUC,EAAgBd,KAAKJ,MAAMlB,OAAOqC,QAAO,SAAAC,GAEvC,OAAOA,EAAM7C,KAAK8C,cAAcC,SAAS,EAAKtB,MAAMU,YAAYW,kBAEpE,OAA8B,IAA3BjB,KAAKJ,MAAMlB,OAAOyC,OACV,yCAIH,sBAAK7C,UAAU,KAAf,UACI,oBAAIA,UAAU,MAAd,0BACA,cAAC,EAAD,CAAWU,aAAcgB,KAAKI,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAU1B,OAAQoC,e,GA/ChCZ,aCPEkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCjBnC,IAYeC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCIdO,IAASC,OAEN,cAAC,EAAD,IACDC,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7B,MAAK,SAAC8B,GACLA,EAAaC,gBAEdC,OAAM,SAAC5C,GACN6C,QAAQ7C,MAAMA,EAAM8C,YE7F5BnB,M","file":"static/js/main.a611fd88.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,email,id}) => {\r\n//const {name,email,id} = props;\r\nreturn (\r\n    \r\n    <div className = 'tc bg-light-green dib br3 ma2 grow bw2 shadow-5'>\r\n        <img alt='robots' src={`https://robohash.org/${id}?200x200`} ></img>\r\n        <div>\r\n            <h2> {name}</h2>\r\n            <p> {email}</p>\r\n        </div>\r\n    </div>\r\n)\r\n\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\n//import {robots} from './robots';\r\nimport Card from './Card'\r\nconst CardList = ({robots}) => {\r\n    \r\n    const cardComponent =robots.map((user,i) => {\r\n        return (\r\n        <Card \r\n            key={robots[i].id}\r\n            id={robots[i].id}\r\n            name= {robots[i].name}\r\n            email={robots[i].email} \r\n            />\r\n            )\r\n    })\r\n    return (\r\n            <div>\r\n                {cardComponent}\r\n            </div>\r\n        /*\r\n        <div>\r\n            <Card id={robots[0].id} name= {robots[0].name} email={robots[0].email} />\r\n            <Card id={robots[1].id} name= {robots[1].name} email={robots[1].email} />\r\n            <Card id={robots[2].id} name= {robots[2].name} email={robots[2].email} />\r\n            <Card id={robots[3].id} name= {robots[3].name} email={robots[3].email} />\r\n        </div>*/\r\n    )\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchChange}) =>{\r\n    return (\r\n        <div className= 'pa2'>\r\n        <input\r\n        className='pa3 ba b--green bg-lightest-blue' \r\n        type='search' \r\n        placeholder='search robots'\r\n        onChange={searchChange}\r\n         />\r\n         </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n            <div style={{overflowY: 'scroll' , border: '5px solid green' , height:'500px' }}>\r\n                {props.children}\r\n            </div>\r\n    );\r\n    \r\n};\r\n\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\r\n    constructor(props) {\r\n            super(props);\r\n            this.state={\r\n                hasError:false\r\n            }\r\n    }\r\n\r\n    componentDidCatch(error,info){\r\n        this.setState({hasError: true});\r\n    }\r\n\r\n    render(){\r\n        if(this.state.hasError)\r\n        {\r\n            return <h1> Oooops. That is not good </h1>\r\n        }\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundry;","import React,{Component} from 'react';\r\nimport CardList from '../components/CardList';\r\n//import { robots } from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport './App.css'\r\n//import { robots } from '../robots';\r\nimport Scroll from '../components/Scroll';\r\nimport ErrorBoundry from '../components/ErrorBoundry'\r\n//Props never change\r\n// STATE object describe applicaton it is able to change\r\n// STATE >> props\r\n// the parent tell what state is and child recieve it as props\r\n\r\n\r\n//const state = {\r\n//    robots: robots,\r\n//    searchfield:''\r\n//}\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state = {\r\n                robots: [],\r\n                searchfield:''\r\n        }\r\n    }\r\n\r\ncomponentDidMount(){\r\n   // console.log('check');\r\n   fetch('https://jsonplaceholder.typicode.com/users')\r\n   .then(response =>{\r\n     return  response.json();\r\n   })\r\n   .then(users=>{\r\n   // {}\r\n    this.setState({robots: users})\r\n   });\r\n    //this.setState({robots: robots})\r\n}\r\n\r\n    onSearchChange = (event) =>{\r\n        this.setState({searchfield: event.target.value})\r\n        //console.log(event.target.value);\r\n       /* const filteredrobots= this.state.robots.filter(robots =>\r\n        {\r\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n        })*/\r\n    }\r\n    render () \r\n    {\r\n        //const {robots , searchfield} = this.state;\r\n        const filteredrobots= this.state.robots.filter(robot =>\r\n            {\r\n                return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n            })\r\n            if(this.state.robots.length===0){\r\n                return <h1>Loading</h1>\r\n            }\r\n            else{\r\n                    return(\r\n                    <div className='tc'>\r\n                        <h1 className='f1 '> RoboFriends</h1>\r\n                        <SearchBox searchChange={this.onSearchChange}/>\r\n                        <Scroll>\r\n                            <ErrorBoundry>\r\n                                <CardList robots={filteredrobots}/>\r\n                            </ErrorBoundry> \r\n                        </Scroll>\r\n                    </div>\r\n                        );\r\n                }\r\n    }\r\n\r\n        \r\n    \r\n}\r\n/*\r\nconst App = () => {\r\n    return (\r\n        <div className='tc'>\r\n        <h1 className='f1 '> RoboFriends</h1>\r\n        <SearchBox />\r\n        <CardList robots={robots}/>\r\n        </div>\r\n    )\r\n}\r\n*/\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from './Card';\n//import CardList from './CardList';\nimport App from './containers/App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\nimport {robots} from './robots'\n\nReactDOM.render(\n  \n   <App/>,\n  document.getElementById('root')\n);\n/*\nReactDOM.render(\n  \n  <React.StrictMode>\n   \n    <div>\n      \n    <Card id={robots[0].id} name= {robots[0].name} email={robots[0].email} />\n    <Card id={robots[1].id} name= {robots[1].name} email={robots[1].email} />\n    <Card id={robots[2].id} name= {robots[2].name} email={robots[2].email} />\n    <Card id={robots[3].id} name= {robots[3].name} email={robots[3].email} />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n*/\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}